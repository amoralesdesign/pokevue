{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nexport default {\n  data() {\n    return {\n      pokemons: [],\n      types: [],\n      search: \"\",\n      selected_type: null,\n      id_selected: null,\n      showModal: false,\n      settings: {\n        itemsToShow: 1,\n        snapAlign: 'center'\n      },\n      breakpoints: {\n        // 700px and up\n        300: {\n          itemsToShow: 3.5,\n          snapAlign: 'center'\n        },\n        // 1024 and up\n        1024: {\n          itemsToShow: 12.5,\n          itemsToScroll: 4,\n          snapAlign: 'start'\n        }\n      }\n    };\n  },\n\n  mounted() {\n    this._loadPokemons();\n\n    this.$http.get(\"https://pokeapi.co/api/v2/type\").then(response => {\n      this.types = response.data.results;\n    });\n  },\n\n  methods: {\n    _loadPokemons() {\n      this.$http.get(\"https://pokeapi.co/api/v2/pokemon?limit=151\").then(response => {\n        this.pokemons = response.data.results;\n      });\n      this.selected_type = null;\n    },\n\n    _getFilterTypes(type) {\n      this.selected_type = type.name;\n      this.$http.get(type.url).then(poketypes => {\n        var pokemons_by_type = poketypes.data.pokemon.map(types => {\n          return types.pokemon;\n        });\n        this.pokemons = pokemons_by_type.filter(pokemon => this._getId(pokemon) <= 151);\n      });\n    },\n\n    _getId(pokemon) {\n      return Number(pokemon.url.split(\"/\")[6]);\n    },\n\n    _getName(pokemon) {\n      return pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1);\n    },\n\n    _showPokemon(id) {\n      this.id_selected = id;\n      this.showModal = !this.showModal;\n    }\n\n  },\n  computed: {\n    filtered_pokemons() {\n      return this.pokemons.filter(item => {\n        return item.name.includes(this.search.toLowerCase().trim());\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAgEA,eAAe;EAEbA,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EADL;MAELC,KAAK,EAAE,EAFF;MAGLC,MAAM,EAAE,EAHH;MAILC,aAAa,EAAE,IAJV;MAKLC,WAAW,EAAE,IALR;MAMLC,SAAS,EAAE,KANN;MAOLC,QAAQ,EAAE;QACRC,WAAW,EAAE,CADL;QAERC,SAAS,EAAE;MAFH,CAPL;MAWLC,WAAW,EAAE;QACb;QACA,KAAK;UACHF,WAAW,EAAE,GADV;UAEHC,SAAS,EAAE;QAFR,CAFQ;QAMb;QACA,MAAM;UACJD,WAAW,EAAE,IADT;UAEJG,aAAa,EAAE,CAFX;UAGJF,SAAS,EAAE;QAHP;MAPO;IAXR,CAAP;EAyBD,CA5BY;;EA8BbG,OAAO,GAAG;IAER,KAAKC,aAAL;;IAEA,KAAKC,KAAL,CACGC,GADH,CACO,gCADP,EAEGC,IAFH,CAESC,QAAD,IAAc;MAClB,KAAKf,KAAL,GAAae,QAAQ,CAACjB,IAAT,CAAckB,OAA3B;IACD,CAJH;EAKD,CAvCY;;EAyCbC,OAAO,EAAE;IAEPN,aAAa,GAAG;MAEd,KAAKC,KAAL,CACCC,GADD,CACK,6CADL,EAECC,IAFD,CAEOC,QAAD,IAAc;QAClB,KAAKhB,QAAL,GAAgBgB,QAAQ,CAACjB,IAAT,CAAckB,OAA9B;MACD,CAJD;MAMA,KAAKd,aAAL,GAAqB,IAArB;IACD,CAXM;;IAYPgB,eAAe,CAACC,IAAD,EAAO;MAEpB,KAAKjB,aAAL,GAAqBiB,IAAI,CAACC,IAA1B;MAEA,KAAKR,KAAL,CACCC,GADD,CACKM,IAAI,CAACE,GADV,EAECP,IAFD,CAEOQ,SAAD,IAAe;QAEnB,IAAIC,gBAAe,GAAID,SAAS,CAACxB,IAAV,CAAe0B,OAAf,CAAuBC,GAAvB,CAA4BzB,KAAD,IAAW;UACzD,OAAOA,KAAK,CAACwB,OAAb;QACH,CAFsB,CAAvB;QAIA,KAAKzB,QAAL,GAAgBwB,gBAAgB,CAACG,MAAjB,CAAwBF,OAAM,IAAK,KAAKG,MAAL,CAAYH,OAAZ,KAAwB,GAA3D,CAAhB;MAED,CAVD;IAWD,CA3BM;;IA6BPG,MAAM,CAACH,OAAD,EAAU;MACd,OAAOI,MAAM,CAACJ,OAAO,CAACH,GAAR,CAAYQ,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAD,CAAb;IACD,CA/BM;;IAgCPC,QAAQ,CAACN,OAAD,EAAU;MAChB,OAAOA,OAAO,CAACJ,IAAR,CAAaW,MAAb,CAAoB,CAApB,EAAuBC,WAAvB,KAAuCR,OAAO,CAACJ,IAAR,CAAaa,KAAb,CAAmB,CAAnB,CAA9C;IACD,CAlCM;;IAmCPC,YAAY,CAACC,EAAD,EAAK;MACb,KAAKhC,WAAL,GAAmBgC,EAAnB;MACA,KAAK/B,SAAL,GAAiB,CAAC,KAAKA,SAAvB;IACH;;EAtCM,CAzCI;EAkFbgC,QAAQ,EAAE;IACRC,iBAAiB,GAAG;MAClB,OAAO,KAAKtC,QAAL,CAAc2B,MAAd,CAAsBY,IAAD,IAAU;QACpC,OAAOA,IAAI,CAAClB,IAAL,CAAUmB,QAAV,CAAmB,KAAKtC,MAAL,CAAYuC,WAAZ,GAA0BC,IAA1B,EAAnB,CAAP;MACD,CAFM,CAAP;IAGD;;EALO;AAlFG,CAAf","names":["data","pokemons","types","search","selected_type","id_selected","showModal","settings","itemsToShow","snapAlign","breakpoints","itemsToScroll","mounted","_loadPokemons","$http","get","then","response","results","methods","_getFilterTypes","type","name","url","poketypes","pokemons_by_type","pokemon","map","filter","_getId","Number","split","_getName","charAt","toUpperCase","slice","_showPokemon","id","computed","filtered_pokemons","item","includes","toLowerCase","trim"],"sourceRoot":"","sources":["/Users/foticos/Documents/Kitematic/nginxv2/var/www/pokevue/src/views/Home.vue"],"sourcesContent":["<template>\n  <div class=\"bg-primary px-8 py-2 pb-20 lg:pb-32\">\n    <div class=\"mx-auto\">\n        <div class=\"max-w-xl mx-auto\">\n          <label class=\"relative block\">\n            <input v-model=\"search\" class=\"rounded-full text-center placeholder:text-slate-400 block bg-white w-full border border-slate-300  py-2 pl-9 pr-3 shadow-sm focus:outline-none focus:border-sky-500 focus:ring-sky-500 focus:ring-1 sm:text-sm\" placeholder=\"Search PokÃ©mon o filter by type...\" type=\"text\" name=\"search\"/>\n            <span class=\"absolute inset-y-0 right-0 text-gray-500 flex items-center pr-4\">\n              <i class=\"fa fa-search\"></i>\n            </span>\n          </label>\n        </div>\n      <div class=\"mt-10 mx-auto max-w-6xl\">\n        <Carousel :settings=\"settings\" :breakpoints=\"breakpoints\">\n          <Slide v-for=\"type in types\" :key=\"type.name\">\n            <div \n              @click=\"_getFilterTypes(type)\"\n              class=\"tag cursor-pointer ml-4 text-xs bg-orange-200 text-orange-700\" :class=\"{ 'ring-2 ring-emerald-500 ring-inset': type.name == selected_type }\">\n              {{ type.name }}\n            </div>\n          </Slide>\n\n          <template #addons>\n            <Navigation />\n          </template>\n        </Carousel>\n        <div class=\"text-center\">\n          <div v-if=\"selected_type\" @click=\"_loadPokemons()\" class=\"tag cursor-pointer border border-gray-900 text-gray-900 text-xs mt-3\">remove filters <i class=\"fa fa-xmark ml-1\"></i></div>\n        </div>     \n      </div>\n    </div>\n  </div>\n  <div class=\"container mx-auto\">\n  <div class=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 -mt-12\">\n    <div class=\"pokecard p-4 flex items-center justify-center\" \n      v-for=\"pokemon in filtered_pokemons\"\n      :key=\"pokemon.name\">\n       <div class=\"relative\">\n         <div class=\"uppercase absolute text-lg font-extrabold\">\n           {{ _getName(pokemon) }}\n           <div class=\"-mt-2 text-sm\">#{{ _getId(pokemon) }}</div>\n         </div>\n         <img :src=\"`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${_getId(pokemon)}.png`\" :alt=\"pokemon.name\" class=\"mx-auto w-[10rem]\"/>\n       </div>\n       <div class=\"\">\n        <div class=\"mb-4\"><button class=\"btn border bg-white border-green-500 text-green-500 w-full\" @click=\"_showPokemon(_getId(pokemon))\">Quickview</button></div>\n        <div>\n          <router-link :to=\"{name: 'pokemon', params: {id: _getId(pokemon) }}\">\n            <button class=\"btn btn-cta w-full\">Pokemon</button>\n          </router-link>\n        </div>\n      </div>\n    </div>\n\n    <PokeModal ref=\"pokemodal\" v-show=\"showModal\" @close-modal=\"showModal = false\">\n      <template v-if=\"id_selected\" v-slot:content>\n        <Pokemon refs=\"pokedetail\" :referenceid=\"id_selected\" :quickview=\"true\" class=\"overflow-hidden\"/>\n      </template>\n    </PokeModal>\n  </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n\n  data() {\n    return {\n      pokemons: [],\n      types: [],\n      search: \"\",\n      selected_type: null,\n      id_selected: null,\n      showModal: false,\n      settings: {\n        itemsToShow: 1,\n        snapAlign: 'center',\n      },\n      breakpoints: {\n      // 700px and up\n      300: {\n        itemsToShow: 3.5,\n        snapAlign: 'center',\n      },\n      // 1024 and up\n      1024: {\n        itemsToShow: 12.5,\n        itemsToScroll: 4,\t\n        snapAlign: 'start',\n      },\n    },\n    }\n  },\n  \n  mounted() {\n    \n    this._loadPokemons();\n\n    this.$http\n      .get(\"https://pokeapi.co/api/v2/type\")\n      .then((response) => {\n        this.types = response.data.results;\n      });\n  },\n\n  methods: {\n    \n    _loadPokemons() {\n\n      this.$http\n      .get(\"https://pokeapi.co/api/v2/pokemon?limit=151\")\n      .then((response) => {\n        this.pokemons = response.data.results;\n      });\n\n      this.selected_type = null;\n    },\n    _getFilterTypes(type) {\n\n      this.selected_type = type.name;\n\n      this.$http\n      .get(type.url)\n      .then((poketypes) => {\n        \n        var pokemons_by_type = poketypes.data.pokemon.map((types) => {\n            return types.pokemon;\n        });\n\n        this.pokemons = pokemons_by_type.filter(pokemon => this._getId(pokemon) <= 151);\n            \n      });\n    },\n\n    _getId(pokemon) {\n      return Number(pokemon.url.split(\"/\")[6]);\n    },\n    _getName(pokemon) {\n      return pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1);\n    },\n    _showPokemon(id) {\n        this.id_selected = id;\n        this.showModal = !this.showModal;\n    },\n    \n  },\n  computed: {\n    filtered_pokemons() {\n      return this.pokemons.filter((item) => {\n        return item.name.includes(this.search.toLowerCase().trim());\n      });\n    },\n    \n  },\n}\n</script>\n\n\n"]},"metadata":{},"sourceType":"module"}